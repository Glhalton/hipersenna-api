generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model hsemployees {
  id                  Int                   @id @default(autoincrement())
  branch_id           Int
  winthor_id          Int                   @unique @default(0)
  name                String
  username            String                @unique
  password            String
  created_at          DateTime              @default(now()) @db.Timestamptz(6)
  modified_at         DateTime              @default(now()) @updatedAt @db.Timestamptz(6)
  branch              hsbranches            @relation(fields: [branch_id], references: [id])
  analystRequests     hsvalidity_requests[] @relation("AnalystRelation")
  confereeRequests    hsvalidity_requests[] @relation("ConfereeRelation")
  sessions            hssessions[]
  hsvalidities        hsvalidities[]
  hsusers_permissions hsusers_permissions[]
  hsusers_roles       hsusers_roles[]

  @@map("hsemployees")
}

model hsroles {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String   @db.VarChar(150)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  modified_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  hspermissions_roles hspermissions_roles[]
  hsusers_roles       hsusers_roles[]
}

model hspermissions {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique @db.VarChar(50)
  description         String                @db.VarChar(150)
  created_at          DateTime              @default(now()) @db.Timestamptz(6)
  modified_at         DateTime              @default(now()) @updatedAt @db.Timestamptz(6)
  hsusers_permissions hsusers_permissions[]
  hspermissions_roles hspermissions_roles[]
}

model hspermissions_roles {
  role_id       Int
  permission_id Int
  hsroles       hsroles       @relation(fields: [role_id], references: [id])
  hspermissions hspermissions @relation(fields: [permission_id], references: [id])

  @@id([role_id, permission_id])
}

model hsusers_permissions {
  user_id       Int
  permission_id Int
  hsemployees   hsemployees   @relation(fields: [user_id], references: [id])
  hspermissions hspermissions @relation(fields: [permission_id], references: [id])

  @@id([user_id, permission_id])
}

model hsusers_roles {
  user_id     Int
  role_id     Int
  heemployees hsemployees @relation(fields: [user_id], references: [id])
  hsroles     hsroles     @relation(fields: [role_id], references: [id])

  @@id([user_id, role_id])
}

model hsbranches {
  id                  Int                   @id @default(autoincrement())
  description         String                @db.VarChar(150)
  hsvalidities        hsvalidities[]
  hsvalidity_requests hsvalidity_requests[]
  hsemployees         hsemployees[]
}

model hsvalidities {
  id                  Int                   @id @default(autoincrement())
  branch_id           Int
  employee_id         Int
  status              hsvalidities_status   @default(Pendente)
  request_id          Int?
  created_at          DateTime              @default(now()) @db.Timestamptz(6)
  modified_at         DateTime              @default(now()) @updatedAt @db.Timestamptz(6)
  hsbranches          hsbranches            @relation(fields: [branch_id], references: [id])
  hsemployees         hsemployees           @relation(fields: [employee_id], references: [id])
  hsvalidity_requests hsvalidity_requests?  @relation(fields: [request_id], references: [id])
  hsvalidity_products hsvalidity_products[]
}

model hsvalidity_products {
  id                    Int                   @id @default(autoincrement())
  validity_id           Int
  product_cod           Int
  quantity              Int
  validity_date         DateTime              @db.Date
  treat_id              Int                   @default(1)
  hsvalidity_treatments hsvalidity_treatments @relation(fields: [treat_id], references: [id])
  hsvalidities          hsvalidities          @relation(fields: [validity_id], references: [id])
}

model hsvalidity_requests {
  id                          Int                           @id @default(autoincrement())
  branch_id                   Int
  analyst_id                  Int
  conferee_id                 Int
  status                      hsvalidity_requests_status    @default(Pendente)
  created_at                  DateTime                      @default(now()) @db.Timestamptz(6)
  modified_at                 DateTime                      @default(now()) @updatedAt @db.Timestamptz(6)
  hsvalidities                hsvalidities[]
  hsvalidity_request_products hsvalidity_request_products[]
  analyst                     hsemployees                   @relation("AnalystRelation", fields: [analyst_id], references: [id])
  conferee                    hsemployees                   @relation("ConfereeRelation", fields: [conferee_id], references: [id])
  hsbranches                  hsbranches                    @relation(fields: [branch_id], references: [id])
}

model hsvalidity_request_products {
  id                  Int                                @id @default(autoincrement())
  request_id          Int
  status              hsvalidity_request_products_status @default(Nao_vistoriado)
  product_cod         Int
  validity_date       DateTime                           @db.Date
  hsvalidity_requests hsvalidity_requests                @relation(fields: [request_id], references: [id])
}

model hsvalidity_treatments {
  id                  Int                   @id @default(autoincrement())
  description         String                @db.VarChar(150)
  hsvalidity_products hsvalidity_products[]
}

model hssessions {
  id         String      @id @default(uuid()) @db.Uuid
  user_id    Int
  token      String      @unique
  created_at DateTime    @default(now()) @db.Timestamptz(6)
  expires_at DateTime?   @db.Timestamptz(6)
  user       hsemployees @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("hssessions")
}

enum hsvalidities_status {
  Pendente
  Em_andamento @map("Em andamento")
  Concluido    @map("Concluído")
}

enum hsvalidity_request_products_status {
  Nao_encontrado @map("Não encontrado")
  Nao_vistoriado @map("Não vistoriado")
  Vistoriado
}

enum hsvalidity_requests_status {
  Pendente
  Em_andamento @map("Em andamento")
  Concluido    @map("Concluído")
  Expirado
}
